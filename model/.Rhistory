rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS Model Inputs.R")
#Get benefit data and model
source("Ohio STRS Hybrid DB BModel 2022.R")
#Get workforce data (do this periodically only)
source("Ohio Workforce.R")
# get_wf_data()
#Get liability model
wf_data <- readRDS("wf_data.rds")
source("Ohio STRS liability model.R")
#Get funding model
source("Ohio STRS funding model.R")
baseline_funding <- get_funding_data()
View(baseline_funding)
rm(list = ls())
#Loading required libraries
library("readxl")
library(tidyverse)
library(zoo)
library(profvis)
library(data.table)
library(openxlsx)
#Get actuarial and financial functions
source("utility_functions.R")
#Get model inputs and assumptions
source("Ohio STRS model inputs.R")
#Get benefit data and model
source("Ohio STRS benefit model.R")
#Get workforce data (do this periodically only)
source("Ohio STRS workforce model.R")
# get_wf_data()
#Get liability model
wf_data <- readRDS("wf_data.rds")
source("Ohio STRS liability model.R")
#Get funding model
source("Ohio STRS funding model.R")
##############################################TESTING############################################
baseline_funding <- get_funding_data()
BenMult_Hybrid
View(baseline_funding)
dr_current = dr_current_
dr_new = dr_new_
cola_current_active = COLA_current_active
cola_new_active = COLA_new_active
cola_current_retire = COLA_current_retire
cola_current_retire_one = COLA_current_retire_one
one_time_cola = one_time_cola_
retire_refund_ratio = retire_refund_ratio_
cal_factor = cal_factor_
db_new_ratio = db_new_ratio_
benefit_data <- get_benefit_data(dr_current = dr_current,
dr_new = dr_new,
cola_current_active = cola_current_active,
cola_new_active = cola_new_active,
cola_current_retire = cola_current_retire,
cola_current_retire_one = cola_current_retire_one,
one_time_cola = one_time_cola,
retire_refund_ratio = retire_refund_ratio,
cal_factor = cal_factor)
#Plan design ratio for new hires:
hybrid_new_ratio <- 1 - db_new_ratio
hybrid_legacy_ratio_ <- 1 - db_legacy_ratio_
#Join wf active table with FinalData table to calculate the overall payroll, normal costs, PVFB, and PVFS each year
wf_active_df_final <- wf_data$wf_active_df %>%
filter(year <= YearStart + ModelPeriod) %>%
mutate(entry_year = year - (age - ea)) %>%
left_join(benefit_data$final_tab, by = c("ea" = "entry_age", "age" = "Age", "year" = "Years", "entry_year" = "EntryYear")) %>%
select(ea, age, year, entry_year, n_active, normal_cost_DB, normal_cost_Hybrid, Salary, PVFB_DB, PVFB_Hybrid, PVFNC_DB, PVFNC_Hybrid, PVFS) %>%
replace(is.na(.), 0) %>%
# filter(n_active > 0) %>%
#allocate members to plan designs based on entry year
#2001 was the year the Combined Plan was introduced
mutate(n_active_DB_legacy = ifelse(entry_year <= 2001, n_active,
ifelse(entry_year <= YearStart, n_active * db_legacy_ratio_, 0)),
n_active_DB_new = ifelse(entry_year <= YearStart, 0, n_active * db_new_ratio),
n_active_Hybrid_legacy = ifelse(entry_year <= 2001, 0,
ifelse(entry_year <= YearStart, n_active * hybrid_legacy_ratio_, 0)),
n_active_Hybrid_new = ifelse(entry_year <= YearStart, 0, n_active * hybrid_new_ratio)) %>%
group_by(year) %>%
summarise(
#Payroll
payroll_DB_legacy_est = sum(Salary * n_active_DB_legacy),
payroll_DB_new_est = sum(Salary * n_active_DB_new),
payroll_Hybrid_legacy_est = sum(Salary * n_active_Hybrid_legacy),
payroll_Hybrid_new_est = sum(Salary * n_active_Hybrid_new),
payroll_est = sum(Salary * n_active),
#Normal cost rates
nc_rate_DB_legacy_est = ifelse(payroll_DB_legacy_est == 0, 0, sum(normal_cost_DB * Salary * n_active_DB_legacy) / sum(Salary * n_active_DB_legacy)),
nc_rate_DB_new_est = ifelse(payroll_DB_new_est == 0, 0, sum(normal_cost_DB * Salary * n_active_DB_new) / sum(Salary * n_active_DB_new)),
nc_rate_Hybrid_legacy_est = ifelse(payroll_Hybrid_legacy_est == 0, 0, sum(normal_cost_Hybrid * Salary * n_active_Hybrid_legacy) / sum(Salary * n_active_Hybrid_legacy)),
nc_rate_Hybrid_new_est = ifelse(payroll_Hybrid_new_est == 0, 0, sum(normal_cost_Hybrid * Salary * n_active_Hybrid_new) / sum(Salary * n_active_Hybrid_new)),
#Present value of future benefits
PVFB_DB_legacy_est = sum(PVFB_DB * n_active_DB_legacy),
PVFB_DB_new_est = sum(PVFB_DB * n_active_DB_new),
PVFB_Hybrid_legacy_est = sum(PVFB_Hybrid * n_active_Hybrid_legacy),
PVFB_Hybrid_new_est = sum(PVFB_Hybrid * n_active_Hybrid_new),
#Present value of future normal costs
PVFNC_DB_legacy_est = sum(PVFNC_DB * n_active_DB_legacy),
PVFNC_DB_new_est = sum(PVFNC_DB * n_active_DB_new),
PVFNC_Hybrid_legacy_est = sum(PVFNC_Hybrid * n_active_Hybrid_legacy),
PVFNC_Hybrid_new_est = sum(PVFNC_Hybrid * n_active_Hybrid_new),
#Count of active members
n_active = sum(n_active),
n_active_DB_legacy = sum(n_active_DB_legacy),
n_active_Hybrid_legacy = sum(n_active_Hybrid_legacy)
) %>%
ungroup() %>%
mutate(nc_rate_est = (nc_rate_DB_legacy_est * payroll_DB_legacy_est + nc_rate_DB_new_est * payroll_DB_new_est + nc_rate_Hybrid_legacy_est * payroll_Hybrid_legacy_est + nc_rate_Hybrid_new_est * payroll_Hybrid_new_est) / payroll_est,
AAL_active_DB_legacy_est = PVFB_DB_legacy_est - PVFNC_DB_legacy_est,
AAL_active_DB_new_est = PVFB_DB_new_est - PVFNC_DB_new_est,
AAL_active_Hybrid_legacy_est = PVFB_Hybrid_legacy_est - PVFNC_Hybrid_legacy_est,
AAL_active_Hybrid_new_est = PVFB_Hybrid_new_est - PVFNC_Hybrid_new_est) %>%
replace(is.na(.), 0)
View(wf_active_df_final)
View(baseline_funding)
# baseline_funding <- get_funding_data()
# reduceDR <- get_funding_data(dr_current = 0.06, dr_new = 0.06)
#
baseline_liab <- get_liability_data()
View(baseline_liab)
